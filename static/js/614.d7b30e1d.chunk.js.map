{"version":3,"file":"static/js/614.d7b30e1d.chunk.js","mappings":"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","sources":["webpack://sjwilliams.world/./src/pages/Gallery/Gallery.module.css?d8a5","pages/Gallery/Gallery.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"galleryWrapper\":\"Gallery_galleryWrapper__yA45Z\",\"galleryContainer\":\"Gallery_galleryContainer__AeYUJ\",\"title\":\"Gallery_title__g329n\",\"galleryGrid\":\"Gallery_galleryGrid__uC3VC\",\"galleryItem\":\"Gallery_galleryItem__8z30+\",\"modal\":\"Gallery_modal__535bB\",\"modalImage\":\"Gallery_modalImage__YgWZV\",\"stickersContainer\":\"Gallery_stickersContainer__3AZ95\",\"sticker\":\"Gallery_sticker__FgbeH\",\"shuffleButton\":\"Gallery_shuffleButton__hlp9v\"};","import React, { useState, useEffect } from \"react\";\nimport styles from \"./Gallery.module.css\";\n\nconst ACCESS_TOKEN = \"J7ruXpTpvNRJGQNdJ6x4d_a2Pr396ODnIWFWVei_-1E\";\n\nconst Gallery = () => {\n  const [images, setImages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  // Fetch gallery images from the Gallery channel\n  useEffect(() => {\n    const fetchGalleryChannel = async () => {\n      try {\n        setLoading(true);\n        const perPage = 100;\n        let page = 1;\n        let allContents = [];\n        let fetchedData = null;\n        // Loop through pages until all contents are fetched\n        do {\n          const response = await fetch(\n            `https://api.are.na/v2/channels/gallery-5sy-esdksbc?per=${perPage}&page=${page}`,\n            {\n              headers: {\n                Authorization: `Bearer ${ACCESS_TOKEN}`,\n              },\n            }\n          );\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const data = await response.json();\n          if (page === 1) {\n            fetchedData = data;\n          }\n          allContents = allContents.concat(data.contents);\n          page++;\n        } while (allContents.length < fetchedData.contents_count);\n\n        // Filter for image blocks (blocks with class \"image\" and a valid URL)\n        const imageBlocks = allContents.filter(\n          (block) =>\n            block.class &&\n            block.class.toLowerCase() === \"image\" &&\n            (block.image?.original?.url || block.image?.url)\n        );\n        setImages(imageBlocks);\n      } catch (err) {\n        console.error(\"Error fetching gallery channel:\", err);\n        setError(\"Error fetching gallery data.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchGalleryChannel();\n  }, []);\n\n  // Shuffle the images array using Fisher-Yates algorithm\n  const shuffleArray = (array) => {\n    let newArray = array.slice();\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  };\n\n  const handleShuffle = () => {\n    setImages((prevImages) => shuffleArray(prevImages));\n  };\n\n  if (loading) {\n    return <div className={styles.galleryContainer}></div>;\n  }\n\n  if (error) {\n    return <div className={styles.galleryContainer}></div>;\n  }\n\n  return (\n    <div className={styles.galleryWrapper}>\n      <div className={styles.galleryContainer}>\n        {images.length > 0 ? (\n          <div className={styles.galleryGrid}>\n            {images.map((block, index) => {\n              const imageUrl = block.image?.original?.url || block.image?.url;\n              return imageUrl ? (\n                <div\n                  key={index}\n                  className={styles.galleryItem}\n                  onClick={() => setSelectedImage(imageUrl)}\n                >\n                  <img src={imageUrl} alt={block.title || `Image ${index}`} />\n                </div>\n              ) : null;\n            })}\n          </div>\n        ) : (\n          <p>No images found.</p>\n        )}\n        {selectedImage && (\n          <div className={styles.modal} onClick={() => setSelectedImage(null)}>\n            <img\n              src={selectedImage}\n              alt=\"Enlarged view\"\n              className={styles.modalImage}\n            />\n          </div>\n        )}\n        <button className={styles.shuffleButton} onClick={handleShuffle}>\n          Shuffle Gallery\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Gallery;\n"],"names":["Gallery","images","setImages","useState","loading","setLoading","error","setError","selectedImage","setSelectedImage","useEffect","async","perPage","page","allContents","fetchedData","response","fetch","headers","Authorization","ok","Error","status","data","json","concat","contents","length","contents_count","imageBlocks","filter","block","_block$image","_block$image$original","_block$image2","class","toLowerCase","image","original","url","err","console","fetchGalleryChannel","_jsx","className","styles","children","_jsxs","map","index","_block$image3","_block$image3$origina","_block$image4","imageUrl","onClick","src","alt","title","handleShuffle","prevImages","array","newArray","slice","i","j","Math","floor","random","shuffleArray"],"sourceRoot":""}