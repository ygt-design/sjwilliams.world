{"version":3,"file":"static/js/935.8bf87f45.chunk.js","mappings":"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","sources":["pages/Home/Home.js"],"sourcesContent":["// src/pages/Home/Home.js\nimport React, { useRef, useEffect } from \"react\";\nimport p5 from \"p5\";\nimport \"./Home.module.css\"; // Optional CSS for additional styling\n\nconst Home = () => {\n  const sketchRef = useRef();\n\n  useEffect(() => {\n    const sketch = (p) => {\n      let customFont;\n      let textStr = \"sjwilliams\";\n      let textImage;\n      let centerX, centerY, maxDist;\n\n      p.preload = () => {\n        // Make sure Seagram.otf is placed at public/assets/fonts/Seagram.otf\n        customFont = p.loadFont(\"/fonts/Seagram.otf\");\n      };\n\n      p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n        p.background(255);\n        // Use customFont if available; otherwise fallback to Helvetica.\n        p.textFont(customFont || \"Helvetica\");\n        textImage = p.createGraphics(p.width, p.height);\n        const ctx = textImage.elt.getContext(\"2d\", {\n          willReadFrequently: true,\n        });\n        textImage.drawingContext = ctx;\n        textImage.pixelDensity(1);\n        updateCenter();\n      };\n\n      // Calculate center and maximum distance.\n      const updateCenter = () => {\n        centerX = p.width / 2;\n        centerY = p.height / 2;\n        const d1 = p.dist(centerX, centerY, 0, 0);\n        const d2 = p.dist(centerX, centerY, p.width, 0);\n        const d3 = p.dist(centerX, centerY, 0, p.height);\n        const d4 = p.dist(centerX, centerY, p.width, p.height);\n        maxDist = p.max(d1, d2, d3, d4);\n      };\n\n      p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n        updateCenter();\n      };\n\n      p.draw = () => {\n        p.background(255);\n\n        // Increase gridStep (fewer circles).\n        let gridStep = p.map(p.mouseX, 0, p.width, 5, 10);\n        // Responsive font size relative to canvas width.\n        let fontSize = p.width / 10;\n\n        // Create offscreen graphics buffer to render text.\n        textImage.background(255);\n        textImage.textFont(customFont || \"Helvetica\");\n        textImage.textSize(fontSize);\n        textImage.textAlign(p.CENTER, p.CENTER);\n        textImage.fill(0);\n        textImage.text(textStr, p.width / 2, p.height / 2);\n        textImage.loadPixels();\n\n        let dMin = 2;\n        let dMax = gridStep;\n\n        // Loop over the canvas using gridStep spacing.\n        for (let y = 0; y < p.height; y += gridStep) {\n          for (let x = 0; x < p.width; x += gridStep) {\n            let ix = p.floor(x);\n            let iy = p.floor(y);\n            let index = (ix + iy * textImage.width) * 4;\n            let brightnessValue = textImage.pixels[index];\n\n            // Base circle diameter from brightness.\n            let diameter = p.map(brightnessValue, 0, 255, dMax, dMin);\n\n            // Increase size near mouse.\n            let dMouse = p.dist(x, y, p.mouseX, p.mouseY);\n            let mouseFactor = p.map(dMouse, 0, 150, 1.5, 1);\n            mouseFactor = p.constrain(mouseFactor, 1, 1.5);\n            diameter *= mouseFactor;\n\n            // Variation via Perlin noise.\n            let noiseFactor = p.noise(x * 0.05, y * 0.05);\n            let varietyScale = p.map(noiseFactor, 0, 1, 0.75, 1.25);\n            diameter *= varietyScale;\n\n            // Calculate distance from center.\n            let dCenter = p.dist(x, y, centerX, centerY);\n            // Map distance to a scaling factor (1 at center, 0 at edges).\n            let scaleFactor = p.map(dCenter, 0, maxDist, 1, 0);\n            scaleFactor = p.constrain(scaleFactor, 0, 1);\n\n            // For light areas, apply the scaling factor; for dark, keep full size.\n            let finalScale = brightnessValue > 128 ? scaleFactor : 1;\n            let finalDiameter = diameter * finalScale;\n\n            p.noStroke();\n            p.fill(0);\n            p.ellipse(x, y, finalDiameter, finalDiameter);\n          }\n        }\n      };\n    };\n\n    const myP5 = new p5(sketch, sketchRef.current);\n    return () => {\n      myP5.remove();\n    };\n  }, []);\n\n  return <div ref={sketchRef} />;\n};\n\nexport default Home;\n"],"names":["Home","sketchRef","useRef","useEffect","myP5","p5","p","customFont","textImage","centerX","centerY","maxDist","preload","loadFont","setup","createCanvas","windowWidth","windowHeight","background","textFont","createGraphics","width","height","ctx","elt","getContext","willReadFrequently","drawingContext","pixelDensity","updateCenter","d1","dist","d2","d3","d4","max","windowResized","resizeCanvas","draw","gridStep","map","mouseX","fontSize","textSize","textAlign","CENTER","fill","text","loadPixels","dMax","y","x","index","floor","brightnessValue","pixels","diameter","dMouse","mouseY","mouseFactor","constrain","noiseFactor","noise","dCenter","scaleFactor","finalDiameter","noStroke","ellipse","current","remove","_jsx","ref"],"sourceRoot":""}