{"version":3,"file":"static/js/676.b849cfe5.chunk.js","mappings":"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","sources":["webpack://sjwilliams.world/./src/components/WorkItem/WorkItem.module.css?595e","components/WorkItem/WorkItem.js","webpack://sjwilliams.world/./src/pages/Work/Work.module.css?e3e7","pages/Work/Work.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"workItem\":\"WorkItem_workItem__N4eQ2\",\"workItemLink\":\"WorkItem_workItemLink__CsaFY\",\"fadeInAnimation\":\"WorkItem_fadeInAnimation__bPftD\",\"blocksContainer\":\"WorkItem_blocksContainer__K8J7Z\",\"coverBlocks\":\"WorkItem_coverBlocks__6gF2R\",\"coverBlock\":\"WorkItem_coverBlock__zS2q-\",\"titleBlock\":\"WorkItem_titleBlock__jkBsg\",\"blockImage\":\"WorkItem_blockImage__rrpPh\"};","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./WorkItem.module.css\";\n\nconst ACCESS_TOKEN = \"J7ruXpTpvNRJGQNdJ6x4d_a2Pr396ODnIWFWVei_-1E\";\n\nconst WorkItem = ({ channel, index }) => {\n  const [fullChannel, setFullChannel] = useState(channel);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (\n      channel.contents_count &&\n      channel.contents &&\n      channel.contents.length < channel.contents_count\n    ) {\n      const fetchFullChannel = async () => {\n        setLoading(true);\n        try {\n          const perPage = 200;\n          let page = 1;\n          let allContents = [];\n          let fetchedData = null;\n          do {\n            const response = await fetch(\n              `https://api.are.na/v2/channels/${channel.id}?per=${perPage}&page=${page}`,\n              {\n                headers: { Authorization: `Bearer ${ACCESS_TOKEN}` },\n              }\n            );\n            const data = await response.json();\n            if (page === 1) {\n              fetchedData = data;\n            }\n            allContents = allContents.concat(data.contents);\n            page++;\n          } while (allContents.length < channel.contents_count);\n\n          const fullChannelData = { ...fetchedData, contents: allContents };\n          setFullChannel(fullChannelData);\n        } catch (error) {\n          console.error(\"Error fetching full channel data:\", error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchFullChannel();\n    }\n  }, [channel]);\n\n  if (!channel.title || !channel.title.startsWith(\"-\")) {\n    return null;\n  }\n\n  const coverBlocks = fullChannel.contents.filter((block) => {\n    return block.title && block.title.trim().toLowerCase() === \"cover\";\n  });\n\n  const titleBlocks = fullChannel.contents.filter((block) => {\n    return block.title && block.title.trim().toLowerCase() === \"title\";\n  });\n\n  return (\n    <Link\n      to={`/case-study/${channel.id}`}\n      className={styles.workItemLink}\n      style={{ animationDelay: `${index * 0.2}s` }}\n    >\n      <div className={`${styles.workItem} ${styles.fadeIn}`}>\n        {loading && <p>Loading full channel data...</p>}\n        <div className={styles.blocksContainer}>\n          <div className={styles.coverBlocks}>\n            {coverBlocks.length > 0 ? (\n              coverBlocks.map((block, i) => (\n                <div key={`cover-${i}`} className={styles.coverBlock}>\n                  {block.class && block.class.toLowerCase() === \"image\" && (\n                    <img\n                      src={block.image?.original?.url || block.image?.url}\n                      alt=\"Cover\"\n                      className={styles.blockImage}\n                    />\n                  )}\n                  {block.class &&\n                    block.class.toLowerCase() === \"attachment\" && (\n                      <a href={block.attachment?.url}>Attachment</a>\n                    )}\n                  {!block.class && <p>{block.title}</p>}\n                </div>\n              ))\n            ) : (\n              <p>No Cover Blocks Found</p>\n            )}\n          </div>\n          <div className={styles.titleBlocks}>\n            {titleBlocks.length > 0 ? (\n              titleBlocks.map((block, i) => (\n                <div key={`title-${i}`} className={styles.titleBlock}>\n                  {block.class && block.class.toLowerCase() === \"image\" && (\n                    <img\n                      src={block.image?.original?.url || block.image?.url}\n                      alt=\"Title\"\n                      className={styles.blockImage}\n                    />\n                  )}\n                  {block.class &&\n                    block.class.toLowerCase() === \"attachment\" && (\n                      <a href={block.attachment?.url}>Attachment</a>\n                    )}\n                  {(!block.class ||\n                    (block.class.toLowerCase() !== \"image\" &&\n                      block.class.toLowerCase() !== \"attachment\")) && (\n                    <p>{block.title}</p>\n                  )}\n                </div>\n              ))\n            ) : (\n              <p>No Title Blocks Found</p>\n            )}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default WorkItem;\nexport { WorkItem };\n","// extracted by mini-css-extract-plugin\nexport default {\"workItemsContainer\":\"Work_workItemsContainer__hl3Ul\"};","// src/pages/Work/Work.js\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport WorkItem from \"../../components/WorkItem/WorkItem\";\nimport styles from \"./Work.module.css\";\n\nconst ACCESS_TOKEN = \"J7ruXpTpvNRJGQNdJ6x4d_a2Pr396ODnIWFWVei_-1E\";\n\nconst Work = () => {\n  const [channels, setChannels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const containerRef = useRef(null);\n\n  // Fetch and filter channels on mount\n  useEffect(() => {\n    const fetchChannels = async () => {\n      try {\n        const response = await fetch(\n          \"https://api.are.na/v2/groups/sjwilliams-world/channels?per=100&page=1\",\n          { headers: { Authorization: `Bearer ${ACCESS_TOKEN}` } }\n        );\n        const data = await response.json();\n        const filteredChannels = data.channels.filter(\n          (channel) => channel.title && channel.title.startsWith(\"-\")\n        );\n        setChannels(filteredChannels);\n      } catch (error) {\n        console.error(\"Error fetching channels\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchChannels();\n  }, []);\n\n  // Duplicate channels for infinite scrolling effect\n  const duplicatedChannels = [...channels, ...channels];\n\n  // Wheel handler for horizontal scrolling and infinite loop\n  const handleWheel = (e) => {\n    e.preventDefault();\n    const container = containerRef.current;\n    if (!container) return;\n    const halfWidth = container.scrollWidth / 2;\n    // Scroll horizontally based on vertical wheel movement\n    container.scrollLeft += e.deltaY;\n\n    // Infinite scrolling logic\n    if (container.scrollLeft >= halfWidth) {\n      container.scrollLeft = container.scrollLeft - halfWidth;\n    } else if (container.scrollLeft <= 0) {\n      container.scrollLeft = container.scrollLeft + halfWidth;\n    }\n\n    // Optional: Dispatch custom event for additional effects\n    const scrollPercent = halfWidth > 0 ? container.scrollLeft / halfWidth : 0;\n    window.dispatchEvent(\n      new CustomEvent(\"workScroll\", { detail: scrollPercent })\n    );\n  };\n\n  // Callback ref to attach wheel event listener as soon as the node is available\n  const setContainerRef = useCallback((node) => {\n    if (node !== null) {\n      containerRef.current = node;\n      node.addEventListener(\"wheel\", handleWheel, { passive: false });\n    }\n  }, []);\n\n  // Cleanup the event listener on unmount\n  useEffect(() => {\n    return () => {\n      if (containerRef.current) {\n        containerRef.current.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, []);\n\n  if (loading) {\n    // return <div>Loading work items...</div>;\n  }\n\n  return (\n    <div ref={setContainerRef} className={styles.workItemsContainer}>\n      {duplicatedChannels.map((channel, index) => (\n        <WorkItem key={index} channel={channel} index={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default Work;\n"],"names":["_ref","channel","index","fullChannel","setFullChannel","useState","loading","setLoading","useEffect","contents_count","contents","length","async","perPage","page","allContents","fetchedData","response","fetch","id","headers","Authorization","data","json","concat","fullChannelData","error","console","fetchFullChannel","title","startsWith","coverBlocks","filter","block","trim","toLowerCase","titleBlocks","_jsx","Link","to","className","styles","workItemLink","style","animationDelay","children","_jsxs","workItem","fadeIn","blocksContainer","map","i","_block$image","_block$image$original","_block$image2","_block$attachment","coverBlock","class","src","image","original","url","alt","blockImage","href","attachment","_block$image3","_block$image3$origina","_block$image4","_block$attachment2","titleBlock","Work","channels","setChannels","containerRef","useRef","filteredChannels","fetchChannels","duplicatedChannels","handleWheel","e","preventDefault","container","current","halfWidth","scrollWidth","scrollLeft","deltaY","scrollPercent","window","dispatchEvent","CustomEvent","detail","setContainerRef","useCallback","node","addEventListener","passive","removeEventListener","ref","WorkItem"],"sourceRoot":""}